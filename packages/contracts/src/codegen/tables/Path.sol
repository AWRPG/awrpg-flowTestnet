// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct PathData {
  uint32 fromTileX;
  uint32 fromTileY;
  uint32 toTileX;
  uint32 toTileY;
  uint40 lastUpdated;
  uint40 duration;
}

library Path {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Path", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462000000000000000000000000000050617468000000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x001a060004040404050500000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint32, uint32, uint32, uint32, uint40, uint40)
  Schema constant _valueSchema = Schema.wrap(0x001a060003030303040400000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "entityId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "fromTileX";
    fieldNames[1] = "fromTileY";
    fieldNames[2] = "toTileX";
    fieldNames[3] = "toTileY";
    fieldNames[4] = "lastUpdated";
    fieldNames[5] = "duration";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get fromTileX.
   */
  function getFromTileX(bytes32 entityId) internal view returns (uint32 fromTileX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get fromTileX.
   */
  function _getFromTileX(bytes32 entityId) internal view returns (uint32 fromTileX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set fromTileX.
   */
  function setFromTileX(bytes32 entityId, uint32 fromTileX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((fromTileX)), _fieldLayout);
  }

  /**
   * @notice Set fromTileX.
   */
  function _setFromTileX(bytes32 entityId, uint32 fromTileX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((fromTileX)), _fieldLayout);
  }

  /**
   * @notice Get fromTileY.
   */
  function getFromTileY(bytes32 entityId) internal view returns (uint32 fromTileY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get fromTileY.
   */
  function _getFromTileY(bytes32 entityId) internal view returns (uint32 fromTileY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set fromTileY.
   */
  function setFromTileY(bytes32 entityId, uint32 fromTileY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((fromTileY)), _fieldLayout);
  }

  /**
   * @notice Set fromTileY.
   */
  function _setFromTileY(bytes32 entityId, uint32 fromTileY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((fromTileY)), _fieldLayout);
  }

  /**
   * @notice Get toTileX.
   */
  function getToTileX(bytes32 entityId) internal view returns (uint32 toTileX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get toTileX.
   */
  function _getToTileX(bytes32 entityId) internal view returns (uint32 toTileX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set toTileX.
   */
  function setToTileX(bytes32 entityId, uint32 toTileX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((toTileX)), _fieldLayout);
  }

  /**
   * @notice Set toTileX.
   */
  function _setToTileX(bytes32 entityId, uint32 toTileX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((toTileX)), _fieldLayout);
  }

  /**
   * @notice Get toTileY.
   */
  function getToTileY(bytes32 entityId) internal view returns (uint32 toTileY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get toTileY.
   */
  function _getToTileY(bytes32 entityId) internal view returns (uint32 toTileY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set toTileY.
   */
  function setToTileY(bytes32 entityId, uint32 toTileY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((toTileY)), _fieldLayout);
  }

  /**
   * @notice Set toTileY.
   */
  function _setToTileY(bytes32 entityId, uint32 toTileY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((toTileY)), _fieldLayout);
  }

  /**
   * @notice Get lastUpdated.
   */
  function getLastUpdated(bytes32 entityId) internal view returns (uint40 lastUpdated) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint40(bytes5(_blob)));
  }

  /**
   * @notice Get lastUpdated.
   */
  function _getLastUpdated(bytes32 entityId) internal view returns (uint40 lastUpdated) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint40(bytes5(_blob)));
  }

  /**
   * @notice Set lastUpdated.
   */
  function setLastUpdated(bytes32 entityId, uint40 lastUpdated) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lastUpdated)), _fieldLayout);
  }

  /**
   * @notice Set lastUpdated.
   */
  function _setLastUpdated(bytes32 entityId, uint40 lastUpdated) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lastUpdated)), _fieldLayout);
  }

  /**
   * @notice Get duration.
   */
  function getDuration(bytes32 entityId) internal view returns (uint40 duration) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint40(bytes5(_blob)));
  }

  /**
   * @notice Get duration.
   */
  function _getDuration(bytes32 entityId) internal view returns (uint40 duration) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint40(bytes5(_blob)));
  }

  /**
   * @notice Set duration.
   */
  function setDuration(bytes32 entityId, uint40 duration) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((duration)), _fieldLayout);
  }

  /**
   * @notice Set duration.
   */
  function _setDuration(bytes32 entityId, uint40 duration) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((duration)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 entityId) internal view returns (PathData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 entityId) internal view returns (PathData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 entityId,
    uint32 fromTileX,
    uint32 fromTileY,
    uint32 toTileX,
    uint32 toTileY,
    uint40 lastUpdated,
    uint40 duration
  ) internal {
    bytes memory _staticData = encodeStatic(fromTileX, fromTileY, toTileX, toTileY, lastUpdated, duration);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 entityId,
    uint32 fromTileX,
    uint32 fromTileY,
    uint32 toTileX,
    uint32 toTileY,
    uint40 lastUpdated,
    uint40 duration
  ) internal {
    bytes memory _staticData = encodeStatic(fromTileX, fromTileY, toTileX, toTileY, lastUpdated, duration);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 entityId, PathData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.fromTileX,
      _table.fromTileY,
      _table.toTileX,
      _table.toTileY,
      _table.lastUpdated,
      _table.duration
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 entityId, PathData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.fromTileX,
      _table.fromTileY,
      _table.toTileX,
      _table.toTileY,
      _table.lastUpdated,
      _table.duration
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (uint32 fromTileX, uint32 fromTileY, uint32 toTileX, uint32 toTileY, uint40 lastUpdated, uint40 duration)
  {
    fromTileX = (uint32(Bytes.getBytes4(_blob, 0)));

    fromTileY = (uint32(Bytes.getBytes4(_blob, 4)));

    toTileX = (uint32(Bytes.getBytes4(_blob, 8)));

    toTileY = (uint32(Bytes.getBytes4(_blob, 12)));

    lastUpdated = (uint40(Bytes.getBytes5(_blob, 16)));

    duration = (uint40(Bytes.getBytes5(_blob, 21)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (PathData memory _table) {
    (
      _table.fromTileX,
      _table.fromTileY,
      _table.toTileX,
      _table.toTileY,
      _table.lastUpdated,
      _table.duration
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint32 fromTileX,
    uint32 fromTileY,
    uint32 toTileX,
    uint32 toTileY,
    uint40 lastUpdated,
    uint40 duration
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(fromTileX, fromTileY, toTileX, toTileY, lastUpdated, duration);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32 fromTileX,
    uint32 fromTileY,
    uint32 toTileX,
    uint32 toTileY,
    uint40 lastUpdated,
    uint40 duration
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(fromTileX, fromTileY, toTileX, toTileY, lastUpdated, duration);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 entityId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entityId;

    return _keyTuple;
  }
}
